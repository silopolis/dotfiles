## Common aliases for all shells
## This file is sourced by both .bashrc and .zshrc

# enable color support of ls, less and man, and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    if command -v vivid &> /dev/null; then
        export LS_COLORS="$(vivid generate catppuccin-frappe)"
    elif [ -r ~/.dircolors ]; then
        eval "$(dircolors -b ~/.dircolors)"
    elif [ -r ~/.config/dircolors ]; then
        eval "$(dircolors -b ~/.dircolors)"
    else
        eval "$(dircolors -b)"
    fi

    export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions

    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias diff='diff --color=auto'
    alias ip='ip --color=auto'

    export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
    export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
    export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
    export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
    export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
    export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
    export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
fi

# less
alias less='less -FKR' # Output "raw" control characters by default.

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias l='ls -C --classify --group-directories-first --show-control-chars'
alias la='l --almost-all'
alias ll='l -l --human-readable'
alias lls='ll --sort=size --reverse'
alias llt='ll --sort=time --reverse'
alias llx='ll --sort=extension'
alias lla='ll --almost-all'
alias llas='lla --sort=size --reverse'
alias llat='lla --sort=time --reverse'
alias llax='lla --sort=extension'

# use lsd if available
if command -v lsd &> /dev/null; then
  alias l='lsd --classify --group-directories-first --git'
  alias la='l --almost-all'
  alias ll='l --long'
  alias lls='ll --total-size --sizesort --reverse'
  alias llt='ll --timesort --reverse'
  alias llx='ll --extensionsort'
  alias lla='ll --almost-all'
  alias llas='lla --total-size --sizesort --reverse'
  alias llat='lla --timesort --reverse'
  alias llax='lla --extensionsort'
fi

## cd
alias mkcd='_(){ mkdir -p $1; cd $1; }; _'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

## broot
if command -v broot &> /dev/null; then
  # This script was automatically generated by the broot program.
  # More information can be found in https://github.com/Canop/broot.
  # This function starts broot and executes the command it produces, if any.
  # It's needed because some shell commands, like `cd`, have no useful effect
  # if executed in a subshell.
  function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
  }
fi

## Package management
### APT
alias aptup='sudo apt -V update'
alias aptug='sudo apt -V upgrade'
alias aptar='sudo apt -V autoremove'
alias aptac='sudo apt -V autoclean'
alias apti='sudo apt -V install'
alias aptu='sudo apt -V uninstall'
alias aptp='sudo apt -V purge'
alias apts='apt -V search'
alias aptf='apt-file search'
alias aptm='apt-cache madison'
alias aptsp='apt-cache showpkg'
alias aptpo='apt-cache policy'

## Chromium
# Fix GCM DEPRECATED ENDPOINT error
alias chromium="chromium --disable-gpu"
## chezmoi
alias cm_aliases="alias | grep ^cm"
alias cm_install='sh -c "$(curl -fsLS get.chezmoi.io)" -- init --apply' # $GITHUB_USERNAME
alias cm_install_oneshot='sh -c "$(curl -fsLS get.chezmoi.io)" -- init --oneshot' # $GITHUB_USERNAME
alias cm="chezmoi"
alias cma="chezmoi add"
alias cmaa="chezmoi add --autotemplate"
alias cmaf="chezmoi add --force"
alias cmra="chezmoi re-add"
alias cmap="chezmoi apply"
alias cmapf="chezmoi apply --force"
alias cmreap="chezmoi --refresh-externals apply"
alias cmcd="chezmoi cd"
alias cmd="chezmoi diff"
alias cme="chezmoi edit"
alias cmea="chezmoi edit --apply"
alias cmec="chezmoi edit-config"
alias cmect="chezmoi edit-config-template"
alias cmew="chezmoi edit --watch"
alias cmg="chezmoi git --"
alias cmga="chezmoi git -- add"
alias cmgaa="chezmoi git -- add -A"
alias cmgc="chezmoi git -- commit"
alias cmgca="chezmoi git -- commit --all"
alias cmgcm="chezmoi git -- commit -m"
alias cmgcam="chezmoi git -- commit --all -m"
alias cmgd="chezmoi git -- diff"
alias cmgp="chezmoi git -- push"
alias cmgpf="chezmoi git -- push --force"
alias cmgl="chezmoi git log --"
alias cmglo="chezmoi git log -- --oneline"
alias cmglos="chezmoi git log -- --oneline --stat"
alias cmgrb="chezmoi git -- rebase"
alias cmgrs="chezmoi git -- restore --staged"
alias cmgs="chezmoi git -- status"
alias cmi="chezmoi init" # $GITHUB_USERNAME
alias cmia="chezmoi init --apply" # $GITHUB_USERNAME
alias cmiaf="chezmoi init --apply --force" # $GITHUB_USERNAME
alias cmll="ll $(chezmoi source-path)/"
alias cmlla="lla $(chezmoi source-path)/"
alias cmm="chezmoi managed"
alias cmmkdir="mkdir -p $(chezmoi source-path)/"
alias cmpd="chezmoi git pull -- --autostash --rebase && chezmoi diff"
alias cms="chezmoi status"
alias cmstdbroc="chezmoi state delete-bucket --bucket=entryState" # clear the state of `run_onchange_` scripts
alias cmstdbron="chezmoi state delete-bucket --bucket=scriptState" # clear the state of `run_once_` scripts
alias cmtouch="touch $(chezmoi source-path)/"
alias cmu="chezmoi update"
alias cmum="chezmoi unmanaged"
alias cmun="chezmoi unmanage"

## grep
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '

## find
alias findd='find . -type d -name'
alias findf='find . -type f -name'

## History
alias h='history'
alias hgrep="fc -El 0 | grep"

## Git
alias gita='git add'
alias gitc='git commit -a -m'
alias gits='git status'
alias gitd='git diff'
alias gitds='git diff --staged'
alias gitp='git push origin'
alias gitb='git branch -a'
# Branch changes: see what the current branch has that the designated base hasn't
gbc() {
  git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative $@..$(git rev-parse --abbrev-ref HEAD)
}
# Base branch changes : see what the designated base branch has that the current branch hasn't
gbbc() {
  git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative $(git rev-parse --abbrev-ref HEAD)..$@
}
# "Quick rebase": update current branch with changes from the designated upstream base branch
gqrb() {
  git set-upstream
  git fetch origin "$@:$@" && git pull && git rebase "$@"
}
# Branch interactive rebase of all revisions since it diverged from designated branch
gbir() {
  git rebase -i --autosquash $(git merge-base --fork-point "$@" $(git rev-parse --abbrev-ref HEAD))
}
# Quick fixup
gfu() {
  git commit --amend --no-edit
}

## LazyGit
alias lg='lazygit'
alias lgb='lazygit branch -sm half'
alias lgl='lazygit log -sm half'
alias lgf='lazygit -sm half -f'
alias lgs='lazygit status -sm half'
alias lgh='lazygit stash -sm half'

## forgit
if command -v git-forgit &> /dev/null; then
  case $CURRENT_SHELL in
    "bash")
       [ -f "$HOMEBREW_PREFIX/share/forgit/forgit.plugin.sh" ] \
         && source "$HOMEBREW_PREFIX/share/forgit/forgit.plugin.sh"
      ;;
    "zsh")
      [ -f "$HOMEBREW_PREFIX/share/forgit/forgit.plugin.zsh" ] \
        && source "$HOMEBREW_PREFIX/share/forgit/forgit.plugin.zsh"
      ;;
  esac
fi

## GitHub CLI
eval "$(gh completion -s $CURRENT_SHELL)"
eval "$(gh copilot alias -- $CURRENT_SHELL)"

## GitLab CLI
eval "$(glab completion -s $CURRENT_SHELL)"

# Use English man pages
alias man='LANG=C man'

# Use batcat cat(1) clone with syntax highlighting and Git integration
#alias bat='batcat'
#alias batp='batcat --style plain'
alias batp='bat --style plain'
#alias cat='batcat'

## Kitty terminal
alias icat='kitten icat'
alias ktn='kitty +kitten'
alias kssh='ktn ssh'

## Block devices management
alias lblk="lsblk -e 7"
alias llblk="lsblk -fme 7"
## Extended lsblk output but without loop devices
alias llablk="lsblk -fmte 7"
## Shortcut to only list free space on physical devices
alias dfblk='df -h -x devtmpfs -x tmpfs -x squashfs'

## Disk usage
alias dui="dua interactive"
alias duix="dua --stay-on-filesystem interactive"

## ZModem transfer
alias rz='trz'
alias sz='tsz'

## Networking
alias netop='docker run -it --rm --net=host zingerbee/netop'

## Terraform and friends

### Terraform
alias tf="terraform" 
complete -o nospace -C /home/linuxbrew/.linuxbrew/bin/terraform terraform
complete -o nospace -C /home/linuxbrew/.linuxbrew/bin/terraform tf

### OpenTofu
alias tu="tofu"

### Terragrunt
alias tg="terragrunt"

## InfraCost
if command -v infracost &> /dev/null; then
  source <(infracost completion --shell $CURRENT_SHELL)
fi

## Containers

### Docker
if command -v docker &> /dev/null; then
  source <(docker completion $CURRENT_SHELL)
  alias d=docker
  case ${CURRENT_SHELL} in
    "bash")
      complete -o default -F __start_docker d
      ;;
    "zsh")
      compdef d=docker
      ;;
  esac
fi

## Kubernetes and friends

### kubectl & kubecolor
if command -v kubectl &> /dev/null; then
  source <(kubectl completion ${CURRENT_SHELL})

  if command -v kubecolor &> /dev/null; then
    export KUBECOLOR_FORCE_COLORS=auto
    #export KUBECOLOR_PRESET="dark"
    #export KUBECOLOR_OBJ_FRESH="0s"
    export KUBECOLOR_CONFIG="$HOME/.kube/colors/catppuccin-frappe.yaml"
    # Make "kubecolor" borrow the same completion logic as "kubectl"
    case ${CURRENT_SHELL} in
      "bash")
        complete -o default -F __start_kubectl kubecolor
        ;;
      "zsh")
        compdef kubecolor=kubectl
        ;;
    esac
    # Use kubecolor in place of kubectl
    # FIXME breaks with 'bad pattern: ^[[38' error
    #alias kubectl="kubecolor"
  fi

  alias k="kubectl"
  # Temporary "fix" while is alias kubectl="kubecolor" broken
  alias k="kubecolor"
  # Make "k" alias borrow the same completion logic as "kubectl"
  case ${CURRENT_SHELL} in
    "bash")
      complete -o default -F __start_kubectl k
      ;;
    "zsh")
      compdef k=kubectl
      ;;
  esac

  if [ -f "$HOME/.kube/kubectl_aliases" ]; then
    source "$HOME/.kube/kubectl_aliases"
  elif [ -f "$HOME/.kubectl_aliases" ]; then
   source "$HOME/.kubectl_aliases"
  fi

  alias kail="k tail"

  # Output expanded kubectl command on stderr before running it
  # FIXME Now breaks completion of kubectl & k alias
  #function kubectl() { echo "+ kubectl $@">&2; command kubectl $@; }
fi

### Minikube
if command -v minikube &> /dev/null; then
  source <(minikube completion $CURRENT_SHELL)
  alias mk="minikube"
  case ${CURRENT_SHELL} in
    "bash")
      complete -o default -F __start_minikube mk
      ;;
    "zsh")
      compdef mk=minikube
      ;;
  esac
  alias mkp="mk profile"
  alias mkpl="mk profile list"
  alias mkss="mk status"
fi

### KinD
if command -v kind &> /dev/null; then
  source <(kind completion $CURRENT_SHELL)
  alias kd="kind"
  case ${CURRENT_SHELL} in
    "bash")
      complete -o default -F __start_kind kd
      ;;
    "zsh")
      compdef kd=kind
      ;;
  esac
fi

## AWS

### AWS CLI
if command -v aws &> /dev/null; then
  AWS_BIN_PATH="$(dirname $(realpath $(which aws)))"
  case $CURRENT_SHELL in
    "bash")
      [ -f "$AWS_BIN_PATH/aws_bash_completer" ] \
        && source "$AWS_BIN_PATH/aws_bash_completer" \
      ;;
    "zsh")
      [ -f "$AWS_BIN_PATH/aws_zsh_completer.sh" ] \
        && source "$AWS_BIN_PATH/aws_zsh_completer.sh" \
      ;;
  esac
fi

### awsenv
# Quickly log into and switch between AWS accounts in a terminal
alias awsenv="source $HOME/.local/bin/awsenv"

### LocalStack
if which localstack &> /dev/null; then
  source <(localstack completion $CURRENT_SHELL)
  # Use aws CLI completion for awscli-local wrapper to easily interact with localstack services
  if (type awslocal && type aws_completer) &> /dev/null; then
    complete -C aws_completer awslocal
  fi
fi

## User containerized vagrant-libvirt 
## https://vagrant-libvirt.github.io/vagrant-libvirt/installation.html#docker--podman
vagrant-libvirt(){
  docker run -it --rm \
    -e LIBVIRT_DEFAULT_URI \
    -v /var/run/libvirt/:/var/run/libvirt/ \
    -v $(realpath ${VAGRANT_HOME:-~/.vagrant.d}):/.vagrant.d \
    -v $(realpath "${PWD}"):${PWD} \
    -w "${PWD}" \
    --network host \
    vagrantlibvirt/vagrant-libvirt:latest \
      vagrant $@
}

vagrant-scp(){
  OPTIONS=$(vagrant-libvirt ssh-config | tr -d '\r' | tail -n +2 | grep -v '^Host ' | awk -v ORS=' ' 'NF {print "-o " $1 "=" $2}')
  echo $OPTIONS
  scp ${OPTIONS} "$@" || echo "Transfer failed. Did you use 'default:' as the target?"
}

vagrant-rsync(){
  OPTIONS=$(vagrant-libvirt ssh-config | tr -d '\r' | tail -n +2 | awk -v ORS=' ' 'NF {print "-o " $1 "=" $2}')
  rsync -avz -e "ssh ${OPTIONS}" "$@" || echo "Transfer failed. Did you use 'default:' as the target?"
}

# vim: set syntax=sh :
